#!/usr/bin/env ruby

require 'bundler/setup'

require 'abstract_method'
require 'find'
require 'http'
require 'nokogiri'
require 'open-uri'
require 'parallel'
require 'pathname'
require 'thor'
require 'zlib'

def internet_connection?
  true if open('http://www.google.com/')
rescue
  false
end

def transform_to_tagmap(bookmarks)
  tagmap = {}

  bookmarks.each do |bookmark|
    tags = bookmark.tags
    tags.each do |tag|
      if tagmap.key?(tag)
        tagmap[tag].concat([bookmark])
      else
        tagmap[tag] = [bookmark]
      end
    end
  end

  tagmap
end

# Represents a single abstract bookmark (i.e. one URL)
class Bookmark
  def initialize(name, url, tags)
    @name = name
    @url = url
    @tags = tags
  end

  def stale?
    http_client = HTTP.follow(true)
    begin
      response = http_client.get(@url)
      if response.code == 404 || response.code == 410
        puts "#{@name} at #{@url} is stale, got HTTP response code #{response.code}"
        return TRUE
      elsif response.code != 200
        puts "#{@name} at #{@url} got unusual HTTP response code #{response.code}, marking as not stale"
      end
      return FALSE
    rescue HTTP::ConnectionError
      puts "#{@name} at #{@url} couldn't connect, marking as not stale"
      return FALSE
    rescue HTTP::Redirector::TooManyRedirectsError
      puts "#{@name} at #{@url} went through too many directs, marking as not stale"
      return FALSE
    rescue HTTP::StateError
      puts "#{@name} at #{@url} - HTTP 'state error', marking as not stale"
      return FALSE
    end
  end

  attr_reader :name
  attr_reader :url
  attr_reader :tags
end

# Represents an abstract concept of a group of bookmarks (not nestable)
class BookmarkHolder
  abstract_method :remove_bookmark
  abstract_method :add_bookmark
  attr_reader :bookmarks
end

# Represents a .webloc file (a BookmarkHolder that can hold only one bookmark)
class BookmarkHolderWebloc < BookmarkHolder
  def initialize(filename, tags)
    @filename = filename
    doc = File.open(filename) { |f| Nokogiri::XML(f) }
    @bookmarks = [Bookmark.new(File.basename(filename, File.extname(filename)), doc.at_xpath('//dict/string').content, tags)]
  end

  def remove_bookmark(bookmark)
    # .webloc files can only contain one bookmark
    raise 'Mismatching bookmark' unless bookmark == @bookmarks[0]
    File.delete(@filename)
    puts "Deleted #{@filename}"
  end

  def self.discover(inputdir)
    bookmarkholders = []

    Find.find(inputdir) do |file|
      next unless File.extname(file) == '.webloc'
      dirname = File.dirname(file)
      relative = Pathname.new(dirname).relative_path_from(Pathname.new(inputdir))
      tags = []
      relative.each_filename do |element|
        tags.concat([element])
      end
      bookmarkholders << BookmarkHolderWebloc.new(file, tags)
    end

    bookmarkholders
  end
end

# Represents an .html file which is an index that can contain maintain
# bookmarks. Intended to be "write-only".
class BookmarkHolderIndex < BookmarkHolder
  SCRIPTS = '<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" ' \
    'integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous"/>' \
    '<script src="https://code.jquery.com/jquery-3.1.1.slim.min.js" ' \
    'integrity="sha384-A7FZj7v+d/sdmMqp/nOQwliLvUsJfDHW+k9Omg/a/EheAdgtzNs3hpfag6Ed950n" ' \
    'crossorigin="anonymous"></script>' \
    '<script src="https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js" ' \
    'integrity="sha384-DztdAPBWPRXSA/3eYEEUWrWCy7G5KFbe8fFjk5JAIxUYHKkDx6Qin1DkWx51bBrb" ' \
    'crossorigin="anonymous"></script>' \
    '<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" ' \
    'integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" ' \
    'crossorigin="anonymous"></script>'.freeze

  def initialize
    @bookmarks = []
  end

  def add_bookmark(bookmark)
    @bookmarks.concat([bookmark])
  end

  def write_to_file(filename)
    File.open(filename, 'w') do |file|
      file.write('<html><head>' \
                 '<style>' +
                 IO.read(File.dirname(__FILE__) + '/bookmark-toolbox.css') +
                 '</style>' +
                 SCRIPTS +
                 '</head><body>' \
                 '<div class="bookmarks-container">')
      tagmap = transform_to_tagmap(@bookmarks)
      tagmap.each do |tag, bookmark_list|
        write_to_file_tag(file, tag, bookmark_list)
      end
      file.write('</div></div>' \
                 '<div class="generated">Generated on ' + Time.now.utc.iso8601 + '</div>' \
                 '</body></html>')
    end
  end

  def write_to_file_tag(file, tag, bookmark_list)
    crc_tag = 'z' + Zlib.crc32(tag).to_s

    file.write("<div class='btn-group'>")
    file.write("<span class='bookmark-tag'><span class='dropdown'>")
    file.write("<button id='#{crc_tag}' class='btn btn-sm btn-secondary dropdown-toggle' type='button' data-toggle='dropdown' " \
               "aria-haspopup='true' aria-expanded='true'>")
    file.write(tag.to_s)
    file.write("<span class='caret'></span></button>")
    file.write("<div class='dropdown-menu' aria-labelledby='#{crc_tag}'>")
    bookmark_list.each do |bookmark|
      file.write("<a class='dropdown-item' href='#{bookmark.url}'>#{bookmark.name}</a>")
      file.write("<div class='dropdown-divider'></div>")
    end
    file.write('</div></span></span>')
    file.write('</div>')
  end

  private :write_to_file_tag

  def self.discover(_inputdir)
    raise 'Discovery does not exist for index files'
  end
end

# General Thor class used to model the top-level behaviour of
# bookmark-toolbox.
class BookmarkToolbox < Thor
  desc 'findstale INPUTDIRS', 'Find stale bookmarks in INPUTDIRS'
  options inputdirs: :string
  method_option :delete, aliases: '-d', desc: 'Delete/remove stale bookmarks', type: :boolean

  PROCESS_INCREMENT = 50

  def findstale(inputdirs)
    unless internet_connection?
      abort 'Internet connection not available; making stale check invalid. Aborting.'
    end

    # FIXME: Find a way to make the input an array of directories

    bookmarkholders = _getbookmarkholders([inputdirs])

    puts "Read #{bookmarkholders.length} bookmark holders"
    delete_file = options[:delete]
    Parallel.each_with_index(bookmarkholders, in_processes: 10) do |bookmarkholder, index|
      if (index % PROCESS_INCREMENT).zero?
        puts PROCESS_INCREMENT.to_s + ' more bookmark holders processed'
      end
      bookmarkholder.bookmarks.each do |bookmark|
        next unless bookmark.stale?
        bookmarkholder.remove_bookmark(bookmark) if delete_file
      end
    end
  end

  desc 'convertto INPUTDIRS TYPE TARGET', 'Convert bookmarks in INPUTDIRS to TYPE at TARGET'
  options inputdirs: :string
  options type: :string, default: 'index'
  options target: :string
  def convertto(inputdirs, type, target)
    raise "Type can only be 'index' right now" unless type == 'index'

    bookmarkholders = _getbookmarkholders([inputdirs])

    bookmark_holder_index = BookmarkHolderIndex.new

    bookmarkholders.each do |bookmarkholder|
      bookmarkholder.bookmarks.each do |bookmark|
        bookmark_holder_index.add_bookmark(bookmark)
      end
    end

    bookmark_holder_index.write_to_file(target)
  end

  no_commands do
    def _getbookmarkholders(inputdirs)
      bookmarkholders = []

      inputdirs.each do |inputdir|
        bookmarkholders.concat(BookmarkHolderWebloc.discover(inputdir))
      end

      bookmarkholders
    end
  end
end

BookmarkToolbox.start(ARGV)
